
https://codepen.io/Ifti007/pen/ZEXZzNN

HTML
<!doctype html>
<html>

    
<head>
    <meta charset='utf-8'>
    <title>Olympics - Viz</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link rel="stylesheet" href="./olympics.css">

</head>


<div class="container">

<header>
    <h1>Olympics Visualization</h1>
    <h2>Excersise 1</h2>
</header>
<body>

    <nav>
        <div>
            <svg id="my_dataviz3" height=300 width=450></svg>
          </div>
    
    </nav>

    <article>
        <h3>Medals by Sport and Gender</h3>
    <div id="output">
        <svg id="sport" height="400" width="800"></svg>
    </div>

    <div class="custom-slider">
        <label for="customRange">Select Year: </label>
        <input id="yearRange" type="range" class="custom-range" value="1924" min="1924" max="2016" step="4" id="customRange">
        <p>Selected Year: 
            <span id="year">1924</span> </p>
    
    </div>
</article>

</body>

</div>

<script src="./olympics.js"></script>
<script>
    $(document).ready(() => {
        $("#yearRange").change((e) => {
            let year = parseInt(e.target.value);
            if (year > 1992) {
                year -= 2; // To account for 2 year difference
            }
            $("#year").text(year);
    
            // Whenever the user changes the YEAR slider, run the compute the visualization
            // for the new data
            doViz(); // doViz is defined in the main.js file
        });
    })
</script>
<script>

    // select the svg area
    var SVG = d3.select("#my_dataviz3")
    
    // create a list of keys
    var keys = ["Women", "Men"]
    
    // Usually you have a color scale in your chart already
    var color = d3.scaleOrdinal()
      .domain(keys)
      .range(d3.schemeSet1);
    
    // Add one dot in the legend for each name.
    var size = 20
    SVG.selectAll("mydots")
      .data(keys)
      .enter()
      .append("rect")
        .attr("x", 100)
        .attr("y", function(d,i){ return 100 + i*(size+5)}) // 100 is where the first dot appears. 25 is the distance between dots
        .attr("width", size)
        .attr("height", size)
        .style("fill", function(d){ return color(d)})
    
    // Add one dot in the legend for each name.
    SVG.selectAll("mylabels")
      .data(keys)
      .enter()
      .append("text")
        .attr("x", 100 + size*1.2)
        .attr("y", function(d,i){ return 100 + i*(size+5) + (size/2)}) // 100 is where the first dot appears. 25 is the distance between dots
        .style("fill", function(d){ return color(d)})
        .text(function(d){ return d})
        .attr("text-anchor", "left")
        .style("alignment-baseline", "middle")
    </script>
    
</html>


CSS

.bar {
    fill: steelblue;
}
.bar:hover {
    /* fill: brown; */
    cursor: pointer;
}


.womenbar {
    fill: red;
}

.womenbar:hover {
    /* fill: brown; */
    cursor: pointer;
}

.custom-slider {
    margin-left: 3rem;
    margin-top: 1rem;
}


div.tooltip {
    position: absolute;
    text-align: center;
    width: 90px;
    height: 28px;
    padding: 2px;
    font: 10px sans-serif;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
  }
  

  div.container {
    width: 100%;
    /* border: 1px solid lightslategray; */
}

header, footer {
    padding: 1em;
    color: white;
    background-color: lightslategray;
    clear: left;
    text-align: center;
}

nav {
    float: left;
    max-width: 160px;
    margin: 0;
    padding: 1em;
}

nav ul {
    list-style-type: none;
    padding: 0;
}
   
nav ul a {
    text-decoration: none;
}

article {
    margin-left: 170px;
    /* border-left: 1px solid gray; */
    padding: 1em;
    overflow: hidden;
}

JS

let csvLink = 'https://mas-dse.github.io/DSE241/data/olympics.csv';

doViz();

function plotGraph(data) {
    const margin = { top: 10, right: 30, bottom: 20, left: 50 };
    let width = 850;
    let height = 350;

    // Remove the previous plot so that new plots can be rendered for the newly selected year
    d3.select("#output svg#sport").selectAll("*").remove()

    const svg = d3.select("#output svg#sport")
        .append("g")
        .attr("transform", `translate(${margin.left + "," + margin.top})`);

    const groupByYearSportGender = [...d3.rollup(data, v => v.length, d => d.Year, d => d.Sport, d => d.Gender).entries()]
    const groupByYearSport = [...d3.rollup(data, v => v.length, d => d.Year, d => d.Sport).entries()]
    // console.debug('groupByYearSportGender', groupByYearSportGender);
    // Unique list of countries
    let sports = new Set();
    let year = parseInt(document.getElementById("yearRange").value);

    if (year > 1992) {
        year -= 2;
    }

    // const subset = groupByYear.find(elem => elem[0] == year) ? groupByYear.find(elem => elem[0] == year)[1] : [];
    let subset = groupByYearSportGender.find(elem => elem[0] == year) ? groupByYearSportGender.find(elem => elem[0] == year)[1] : [];
    sports = [...subset.keys()];

    subset = [...subset.entries()]

    let domainSet = groupByYearSport.find(elem => elem[0] == year) ? groupByYearSport.find(elem => elem[0] == year)[1] : [];
    maxDomain = [...domainSet.values()];
    maxDomain = Math.max(...maxDomain) + 10 ;


    

    // width = 1.5 * 25 * sports.length;

    let div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);  

    d3.select("#output svg").attr("width", width + 150);


    const x = d3.scaleBand()
        .domain(sports)
        .range([0, width])
        .padding([0.2])
    
    const y = d3.scaleLinear()
        .domain([0, maxDomain])
        .range([height, 0]);

    svg.selectAll("g")
        .data(subset)
        .enter()
        .append('rect')
        .attr('class', 'bar')
        .attr("x", d => {
            return x(d[0])
        })
        .attr("y", d => {
            return y(d[1].get('Men'))
        })
        .attr("height", d => {
            return height - y(d[1].get('Men'))
        })
        .attr("width", x.bandwidth())
        .on("mouseover", function(event,d) {
            div.transition()
              .duration(200)
              .style("opacity", .9);
                div.html("Men: " + d[1].get("Men") + "<br/> Women: " + (d[1].get("Women")||0))
              .style("left", (event.pageX) + "px")
              .style("top", (event.pageY - 28) + "px");
            })
          .on("mouseout", function(d) {
            div.transition()
              .duration(500)
              .style("opacity", 0);
            });

        svg.selectAll("g")
        .data(subset)
        .enter()
        .append('rect')
        .attr('class', 'womenbar')
        .attr("x", d => {
            return x(d[0])
        })
        .attr("y", d => {
            return y(d[1].get('Men') + (d[1].get('Women')||0))
        })
        .attr("height", d => {
            return height - y(d[1].get('Women') || 0)
        })
        .attr("width", x.bandwidth())
        .on("mouseover", function(event,d) {
            div.transition()
              .duration(200)
              .style("opacity", .9);
                div.html("Men: " + d[1].get("Men") + "<br/> Women: " + (d[1].get("Women")||0))
              .style("left", (event.pageX) + "px")
              .style("top", (event.pageY - 28) + "px");
            })
          .on("mouseout", function(d) {
            div.transition()
              .duration(500)
              .style("opacity", 0);
            });



    svg.append("g")
        .attr("transform", `translate(0, ${height})`)
        .call(d3.axisBottom(x).tickSizeOuter(0))
        .selectAll("text")
        .style("text-anchor", "start")
        .attr("transform", "rotate(15)");;

    svg.append("g")
        .call(d3.axisLeft(y));


}

function doViz() {

    d3.csv(csvLink).then((data) => plotGraph(data));

}
